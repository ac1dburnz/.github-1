# https://help.github.com/en/articles/metadata-syntax-for-github-actions
name: 'Container logs check'
description: 'Match a string in container logs for sanity check'

inputs:
  container_name:
    description: 'Name of the container to test'
    required: true
  log_check:
    description: 'String to check in the logs'
    required: true
  timeout:
    description: 'Timeout in seconds'
    default: "120"

runs:
  using: composite
  steps:
    -
      uses: actions/github-script@v6
      with:
        script: |
          const { spawn } = require('child_process');

          async function checkContainerLogs() {
            return new Promise((resolve, reject) => {
              const containerName = `${{ inputs.container_name }}`;
              const timeout = parseInt('${{ inputs.timeout }}') * 1000;
              const searchString = `${{ inputs.log_check }}`;
              const childProcess = spawn('docker', ['logs', '-f', containerName]);

              let matchFound = false;

              const timeoutId = setTimeout(() => {
                if (!matchFound) {
                  clearInterval(intervalId);
                  childProcess.kill();
                  reject(`String "${searchString}" not found in container logs within ${timeout / 1000} seconds`);
                }
              }, timeout);

              // create an async function to check the container status
              async function checkContainerStatus() {
                const res = await exec.getExecOutput('docker', ['container', 'inspect', '--format', '{{.State.Status}}', containerName], {
                  ignoreReturnCode: true,
                  silent: true
                });
                let err = '';
                if (res.stderr.length > 0 && res.exitCode != 0) {
                  err = `Error while checking container status: ${res.stderr}`;
                }
                if (res.stdout.trim() !== 'running') {
                  err = `Container returned status "${res.stdout.trim()}"`;
                }
                if (err) {
                  clearInterval(intervalId);
                  clearTimeout(timeoutId);
                  childProcess.kill();
                  reject(err);
                }
              }

              const handleStreamData = async (streamData) => {
                const lines = streamData.toString().split('\n');
                for (const line of lines) {
                  if (line.trim() !== '') {
                    await core.info(line);
                    if (line.includes(searchString)) {
                      matchFound = true;
                      clearInterval(intervalId);
                      clearTimeout(timeoutId);
                      childProcess.kill();
                      resolve(`ðŸŽ‰ Found "${searchString}" in container logs`);
                    }
                  }
                }
              };

              childProcess.stdout.on('data', handleStreamData);
              childProcess.stderr.on('data', handleStreamData);

              // pause the stream if the string hasn't been found yet to prevent unnecessary processing
              if (!matchFound) {
                childProcess.stdout.pause();
                setTimeout(() => {
                  childProcess.stdout.resume();
                }, 500);
              }

              // start checking the container status every 5 seconds
              const intervalId = setInterval(checkContainerStatus, 5000);
            });
          }

          checkContainerLogs()
            .then((message) => {
              core.info(message);
            })
            .catch((error) => {
              core.setFailed(error);
            });

# https://help.github.com/en/articles/metadata-syntax-for-github-actions
name: 'Install k3s'
description: 'GitHub Action composite to install k3s'

inputs:
  version:
    description: 'k3s version. (e.g, v1.21.2-k3s1)'
    required: true
    default: 'v1.21.2-k3s1'

runs:
  using: "composite"
  steps:
    -
      uses: actions/github-script@v6
      with:
        script: |
            const fs = require('fs');

            let wait = function(milliseconds) {
              return new Promise((resolve, reject) => {
                if (typeof(milliseconds) !== 'number') {
                  throw new Error('milleseconds not a number');
                }
                setTimeout(() => resolve("done!"), milliseconds)
              });
            }

            try {
              const kubeconfig="${{ env.TEMPDIR }}/kubeconfig.yaml";
              core.info(`storing kubeconfig in ${kubeconfig}`);

              await exec.exec('docker', ["run", "-d",
                "--privileged",
                "--name=install-k3s-action",
                "-e", "K3S_KUBECONFIG_OUTPUT="+kubeconfig,
                "-e", "K3S_KUBECONFIG_MODE=666",
                "-v", "${{ env.TEMPDIR }}:${{ env.TEMPDIR }}",
                "-p", "6443:6443",
                "-p", "80:80",
                "-p", "443:443",
                "-p", "8080:8080",
                "rancher/k3s:${{ inputs.version }}",
                "server"
              ]);
              await wait(10000);

              core.exportVariable('KUBECONFIG', kubeconfig);

              let nodeName;
              for (let count = 1; count <= ${{ env.RETRIES }}; count++) {
                try {
                  const nodeNameOutput = await exec.getExecOutput("kubectl get nodes --no-headers -oname");
                  nodeName = nodeNameOutput.stdout
                } catch (error) {
                  core.info(`Unable to resolve node name (${error.message}). Attempt ${count} of ${{ env.RETRIES }}.`)
                } finally {
                  if (nodeName) {
                    break;
                  }
                  await wait(5000);
                }
              }
              if (!nodeName) {
                await exec.exec(`yq ${kubeconfig}`);
                throw new Error(`Unable to resolve node name after ${{ env.RETRIES }} attempts.`);
              }

              await exec.exec(`kubectl wait --for=condition=Ready ${nodeName}`);
              await exec.exec(`yq ${kubeconfig}`);
            } catch (error) {
              core.setFailed(error.message);
            }
      env:
        TEMPDIR: /tmp/install-k3s-action
        RETRIES: '10'
